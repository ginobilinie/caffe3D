## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
USE_CUDNN := 1

# CPU-only switch (uncomment to build without GPU support).
#CPU_ONLY := 1

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
#CUSTOM_CXX := icpc 

# CUDA directory contains bin/ and lib/ directories that we need.
CUDA_DIR :=/usr/local/cuda
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

# CUDA architecture setting: going with all of them (up to CUDA 5.5 compatible).
# For the latest architecture, you need to install CUDA >= 6.0 and uncomment
# the *_50 lines below.
CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \
		-gencode arch=compute_20,code=sm_21 \
		-gencode arch=compute_30,code=sm_30 \
		-gencode arch=compute_35,code=sm_35 \
		-gencode arch=compute_50,code=sm_50 \
		-gencode arch=compute_50,code=compute_50

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
#BLAS := open
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# MKL_DIR := /nas02/apps/intel-14.0/cc/mkl
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
#BLAS_INCLUDE := /usr/local/OpenBLAS/include
#BLAS_LIB := /usr/local/OpenBLAS/lib
BLAS_INCLUDE := /usr/include
BLAS_LIB := /usr/lib
#BLAS_INCLUDE := /nas02/apps/intel-14.0/cc/mkl/include
#BLAS_LIB := /nas02/apps/intel-14.0/cc/mkl/lib/intel64
#MKL_DIR := /nas02/apps/intel-14.0/cc/mkl
#BLAS_INCLUDE := /nas02/apps/intel-14.0/cc/composer_xe_2013_sp1.0.080/compiler/mkl/include
#BLAS_LIB := /nas02/apps/intel-14.0/cc/composer_xe_2013_sp1.0.080/compiler/mkl/lib/intel64

OPENCV_VERSION := 2

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
MATLAB_DIR := /usr/local/MATLAB2016a
# MATLAB_DIR := /Applications/MATLAB_R2012b.app
#MATLAB_DIR := /nas02/apps/matlab-2013a
# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
		/usr/lib/python2.7/dist-packages/numpy/core/include
#PYTHON_INCLUDE := /usr/local/anaconda/include/python2.7 \
	       /usr/local/anaconda/lib/python2.7/site-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
#PYTHON_INCLUDE := $(HOME)/anaconda/include \
		# $(HOME)/anaconda/include/python2.7 \
		# $(HOME)/anaconda/lib/python2.7/site-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
#PYTHON_LIB := /usr/local/anaconda/lib
PYTHON_LIB := /usr/lib/python2.7/config-x86_64-linux-gnu 
# PYTHON_LIB := $(HOME)/anaconda/lib

WITH_PYTHON_LAYER := 1
# Whatever else you find you need goes here.
#INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /nas02/apps/intel-14.0/cc/mkl/include/
#INCLUDE_DIRS := $(PYTHON_INCLUDE) /nas02/apps/intel-14.0/cc/composer_xe_2013_sp1.0.080/compiler/mkl/include
#LIBRARY_DIRS := $(PYTHON_LIB) /nas02/home/d/o/dongnie/local/boost_1.55.0/lib /usr/lib64/atlas /nas02/apps/intel-14.0/cc/composer_xe_2013_sp1.0.080/compiler/mkl/lib/intel64
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/include /usr/include/boost /usr/include/hdf5/serial
#/nas02/home/d/o/dongnie/local/include
LIBRARY_DIRS := $(PYTHON_LIB) /usr/lib/x86_64-linux-gnu /usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/

#/nas02/home/d/o/dongnie/local/lib
#LIBRARY_DIRS := $(PYTHON_LIB) /nas02/home/d/o/dongnie/local/boost_1.55.0/lib /usr/lib64/atlas /nas02/apps/intel-14.0/cc/mkl/lib/intel64/


# $HOME/cnn/boost_1_55_0/stage/lib 
#/usr/local/lib /usr/lib /nas02/apps/boost-1.55.0/lib

BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
EST_GPUID := 0
# enable pretty build (comment to see full commands)
Q ?= @
